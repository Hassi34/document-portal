from __future__ import annotations

from typing import List

from pydantic import BaseModel, Field

# Reuse core AI schemas where appropriate
from src.schemas.ai.models import ChangeFormat, Metadata


class AnalyzeResponse(Metadata):
    """Response schema for /analyze. Inherits fields from Metadata."""

    pass


class CompareResponse(BaseModel):
    """Response schema for /compare."""

    session_id: str = Field(..., description="Comparison session identifier")
    rows: List[ChangeFormat] = Field(
        ..., description="Row-wise structured comparison output"
    )


class ChatIndexResponse(BaseModel):
    """Response schema for /chat/index."""

    session_id: str = Field(
        ..., description="Chat session identifier used for indexing"
    )
    k: int = Field(
        ..., ge=1, description="Retriever top-k used when building the index"
    )
    use_session_dirs: bool = Field(
        ..., description="Indicates whether per-session directories were used"
    )


class ChatQueryResponse(BaseModel):
    """Response schema for /chat/query."""

    answer: str = Field(..., description="Final answer generated by the RAG chain")
    session_id: str | None = Field(
        default=None, description="Session identifier, if any"
    )
    k: int = Field(..., ge=1, description="Retriever top-k used for the query")
    engine: str = Field("LCEL-RAG", description="Serving engine identifier")


class HealthResponse(BaseModel):
    """Response schema for /health."""

    status: str = Field(..., description="Service status string")
    service: str = Field(..., description="Service name")
